// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl
/** 
 * The Memory chip implements the complete address space of the Hack data memory,
 * including RAM, memory mapped screen, and memory mapped keyboard.
 * Outputs the value of the memory location specified by the address input.
 * If (load == 1), sets the memory location specified by the address input
 * to the value of the in input.
 * Address space rules:
 * Only the upper 16K + 8K + 1 words of the memory are used.
 * Access to address 0 to 16383 (0x0000 to 0x3FFF) results in accessing the RAM;
 * Access to address 16384 to 24575 (0x4000 to 0x5FFF) results in accessing the Screen memory map;
 * Access to address 24576 (0x6000) results in accessing the Keyboard memory map.
 */ 
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    //// Replace this comment with your code.
     IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux(in=load, sel=address[14], a=stage1out1, b=stage1out2);
    RAM16K(in=in, load=stage1out1, address=address[0..13], out=RAMout);
    DMux(in=stage1out2, sel=address[13], a=stage2out1, b=stage2out2);
    Screen(in=in, load=stage2out1, address=address[0..12], out=Screenout);
    Keyboard(out=kbdout);

    Mux16(a=RAMout, b=Screenout, sel=address[14], out=Mux1out);

    Not(in=address[14], out=not14);
    Not(in=address[13], out=not13);
    Or8Way(in[7]=false, in[6]=not14, in[5]=not13, in[0..4]=address[8..12], out=or1out);
    Or8Way(in=address[0..7], out=or2out);
    Or(a=or1out, b=or2out, out=orout);

    Mux16(a=kbdout, b=false, sel=orout, out=Mux2out);
    And(a=address[14], b=address[13], out=finalsel);
    Mux16(a=Mux1out, b=Mux2out, sel=finalsel, out=out);
}
