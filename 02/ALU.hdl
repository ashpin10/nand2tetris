// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.

    // part 1 - zx and zy: if true then zero
    // mux 101: a is selected if 0 or b is selected for 1
    Mux16(a=x, b=false, sel=zx, out=x1);  // x
    Mux16(a=y, b=false, sel=zy, out=y1);  // y
        
    // part 2 - nx, ny: if true then negate
    Not16(in=x1, out=x1bar); 
    Not16(in=y1, out=y1bar);
         
    Mux16(a=x1, b=x1bar, sel=nx, out=x2);  // x
    Mux16(a=y1, b=y1bar, sel=ny, out=y2);  // y

    // part 3 - f: if false then (out = x & y) else (out = x + y)  
    Add16(a=x2, b=y2, out=f1);  // x + y 
    And16(a=x2, b=y2, out=f2);  // x & y

    Mux16(a=f2, b=f1, sel=f, out=t); 

    // part 4 - no: if true then negate
    Not16(in=t, out=tbar);
    
    Mux16(a=t, b=tbar, sel=no, out[0..7]=outRightHalf, out[8..15]=outLeftHalf, out[15]=oo, out=out);

    // part 5 - zr: if false, then zr=1
    Or8Way(in=outRightHalf, out=o1);
    Or8Way(in=outLeftHalf, out=o2);

    Or(a=o1, b=o2, out=op);  // op = 1 if a TRUE bit exists, out = 0 if no TRUE bit

    Mux(a=true, b=false, sel=op, out=zr);  

    // part 6 - ng: if msb = 1, then -ve
    Mux(a=false, b=true, sel=oo, out=ng);  

    
}